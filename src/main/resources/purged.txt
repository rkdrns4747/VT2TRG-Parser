
/*@IF [i/s/b] [변수명/문자열/정수/True/False] [=/!=/</>/<=/>=] [변수명/문자열/정수/True/False]
        '만약 [i/s/b]의 직업을 가진 [변수값(좌)]가 [변수값(우)]와의 [부등호]가 일치할 때, 다음 구문으로 넘어간다.'

    @ELSE
        'IF의 값에 일치하지 않는 경우 실행되는 블록'

    @AND [i/s/b] [변수명/문자열/정수/True/False] [=/!=/</>/<=/>=] [변수명/문자열/정수/True/False]
        '&&' 의미

    @OR [i/s/b] [변수명/문자열/정수/True/False] [=/!=/</>/<=/>=] [변수명/문자열/정수/True/False]
        '||' 의미

    @ENDIF
        '조건블록 종료'*/

    /*
     * Handles one super parent block.
     * Most VT has multi-layered @IF statement, just like TR.
     * HOWEVER, VT does not handle AND and OR with &&, ||, but with separated executors, @AND and @OR.
     * In other words, there's no way to interpret @IF, @AND, @OR, @ELSE, @ENDIF line by line.
     * And also, as I said, @IF block can contain more than two @IFs. What this means is that IfBuilder would be `recursive Object`.
     * variables:
     *  - ifCount: one @IF block can have multiple @IF statements. So, this variable initialized as 0 at first,
     *             and whenever it meets @IF, the value will increase 1, which is contrary to decreasing 1 whenever it meets @ENDIF.
     *             If its value reaches 0, then this IfBuilder will return the whole interpreted @IF block.
     *      ~THIS MIGHT BE UNNECESSARY
     *  - leastCode: codes after starting @IF block. As soon as current IfBuilder interpretation ends(ifCount reaches 0),
     *               leastCode should be trimmed to being have lines after end of if block(@ENDIF).
     *  - resultMap: map that has result String list, startIndex, lastIndex, leastCode.
     *
     */
    /*
    private class IfBuilder {
        private  boolean complex;
        private int startIndex;
        private int ifCount;
        private List<String> leastCode;
        private
        private Map<Integer, Statements_If> readMap = new HashMap<>();
        private Map<String, Object> resultMap = new HashMap<>();
        private IfBuilder(int currentIndex, List<String> least, List<String> args){
            this.startIndex = currentIndex;
            this.leastCode = least; //will contain also its line itself

        }

        private void read(){
            int index = 0;
            while(index < this.leastCode.size()) {
                if(this.leastCode.get(index).startsWith("@IF")) {
                    this.ifCount++;
                    this.readMap.put(index, Statements_If.IF);
                    if(this.ifCount > 1){ complex(); } //complex code
                }else if(this.leastCode.get(index).startsWith("@ENDIF")){
                    this.ifCount--;
                    this.readMap.put(index, Statements_If.ENDIF);
                    if(this.ifCount == 0){ break; }
                }else if(this.leastCode.get(index).startsWith("@AND"))
                    this.readMap.put(index, Statements_If.AND);
                else if(this.leastCode.get(index).startsWith("@OR"))
                    this.readMap.put(index, Statements_If.OR);
            }
        }

        private void interpret(){
            if(complex)
                interpretComplex(); return;

             foo;
        }

        private void interpretComplex(){

        }

        private void complex(){
            this.complex = true;

        }


    }
    private enum Statements_If{
        IF,
        AND,
        OR,
        ELSE,
        ENDIF;
    }
    */
    /*
    @SWITCH [i/s/b] [변수]
        IF와 비슷하지만, 해당 변수 속에 @CASE안의 것이 있는가 확인합니다.
        IF문처럼, 끝에는 @ENDSWITCH가 반드시 써 져야 합니다.

    @CASE [값]
        @SWITCH의 표적이 된 변수 속에 @CASE안에 있는 단어가 들어 있다면, 해당 CASE 구문을 실행시킵니다.

    @ENDSWITCH
        SWITCH 종료문 */
    private class SwitchBuilder {
        private int ifCount;
        private int startIndex;
        private List<String> leastCode;
        private SwitchBuilder(int currentIndex, List<String> least, List<String> args){
            this.startIndex = currentIndex;
            this.leastCode = least; //will contain also its line itself
        }

        private Map<String, Object> build(){

            return null;
        }
    }
    private enum Statements_Switch{
        SWITCH,
        CASE,
        ENDSWITCH;
    }
    /*
        public List<String> convertPlaceholder(String placeholder, String parent){
            // <hello:<hi:<yes>>> layering (X)
            // <hello:<yes>:<hi>> multiplicity
            // <hello:<yes>gogo> string-placeholder form
            String temp = placeholder.substring(1, placeholder.length() - 1);
            String partial;
            if(temp.contains("<")
                    && temp.contains(">")
                    && !(temp.charAt(temp.indexOf("<") + 1) == ' ')
                    && !(temp.charAt(temp.lastIndexOf(">") - 1) == ' ')){
                String[] inside = temp.split(":");

                convertPlaceholder(placeholder.substring(placeholder.indexOf("<"), placeholder.lastIndexOf(">") + 1), inside[0]);
            }else{
                partial = temp;
            }

            return null;
        }*/
                            /*
                            IfBuilder ifBuilder = new IfBuilder(index, script.subList(index, script.size()), Arrays.asList(Arrays.copyOfRange(parts, 1, parts.length)));
                            Map<String, Object> result = ifBuilder.build(); //recursion
                            */
                            //List<String> result = this.handleIfProcess(parts[0].replace("@", ""), Arrays.asList(Arrays.copyOfRange(parts, 1, parts.length)));
